name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Descargar Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extraer Ngrok
      run: Expand-Archive ngrok.zip -DestinationPath ngrok

    - name: Autenticar Ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Habilitar Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Configurar Usuario
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "freeRdpbazzite" -Force)

    - name: Configurar GPU Virtual y CPU Balanceados
      run: |
        # Configuración balanceada entre GPU y CPU (simulación)
        echo "Configurando simulación de GPU: GTX 1080 Ti"
        echo "Configurando CPU: Intel Core i7-9700K"
        echo "Ambos componentes tienen suficiente capacidad para evitar bottlenecks."
        
        # Simulación de rendimiento (logs para monitoreo)
        echo "GPU: GTX 1080 Ti - Memoria: 11GB GDDR5X"
        echo "CPU: Intel Core i7-9700K - 8 núcleos / 8 hilos @ 4.9 GHz"

    - name: Crear el túnel con Ngrok
      run: .\ngrok\ngrok.exe tcp 3389
